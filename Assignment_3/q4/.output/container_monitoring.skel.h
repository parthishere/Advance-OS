/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CONTAINER_MONITORING_BPF_SKEL_H__
#define __CONTAINER_MONITORING_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct container_monitoring_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *data_map;
		struct bpf_map *bss;
		struct bpf_map *rodata;
		struct bpf_map *kconfig;
	} maps;
	struct {
		struct bpf_program *probe_clone;
		struct bpf_program *raw_tracepoint__sys_enter;
		struct bpf_program *monitor_ingress;
		struct bpf_program *monitor_egress;
	} progs;
	struct {
		struct bpf_link *probe_clone;
		struct bpf_link *raw_tracepoint__sys_enter;
		struct bpf_link *monitor_ingress;
		struct bpf_link *monitor_egress;
	} links;
	struct container_monitoring_bpf__bss {
		int target_pid;
		char __pad0[4];
		unsigned long long dev;
		unsigned long long ino;
	} *bss;
	struct container_monitoring_bpf__kconfig {
		_Bool LINUX_HAS_SYSCALL_WRAPPER;
	} *kconfig;

#ifdef __cplusplus
	static inline struct container_monitoring_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct container_monitoring_bpf *open_and_load();
	static inline int load(struct container_monitoring_bpf *skel);
	static inline int attach(struct container_monitoring_bpf *skel);
	static inline void detach(struct container_monitoring_bpf *skel);
	static inline void destroy(struct container_monitoring_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
container_monitoring_bpf__destroy(struct container_monitoring_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
container_monitoring_bpf__create_skeleton(struct container_monitoring_bpf *obj);

static inline struct container_monitoring_bpf *
container_monitoring_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct container_monitoring_bpf *obj;
	int err;

	obj = (struct container_monitoring_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = container_monitoring_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	container_monitoring_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct container_monitoring_bpf *
container_monitoring_bpf__open(void)
{
	return container_monitoring_bpf__open_opts(NULL);
}

static inline int
container_monitoring_bpf__load(struct container_monitoring_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct container_monitoring_bpf *
container_monitoring_bpf__open_and_load(void)
{
	struct container_monitoring_bpf *obj;
	int err;

	obj = container_monitoring_bpf__open();
	if (!obj)
		return NULL;
	err = container_monitoring_bpf__load(obj);
	if (err) {
		container_monitoring_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
container_monitoring_bpf__attach(struct container_monitoring_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
container_monitoring_bpf__detach(struct container_monitoring_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *container_monitoring_bpf__elf_bytes(size_t *sz);

static inline int
container_monitoring_bpf__create_skeleton(struct container_monitoring_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "container_monitoring_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "data_map";
	s->maps[0].map = &obj->maps.data_map;

	s->maps[1].name = "containe.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	s->maps[2].name = "containe.rodata";
	s->maps[2].map = &obj->maps.rodata;

	s->maps[3].name = "contain.kconfig";
	s->maps[3].map = &obj->maps.kconfig;
	s->maps[3].mmaped = (void **)&obj->kconfig;

	/* programs */
	s->prog_cnt = 4;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "probe_clone";
	s->progs[0].prog = &obj->progs.probe_clone;
	s->progs[0].link = &obj->links.probe_clone;

	s->progs[1].name = "raw_tracepoint__sys_enter";
	s->progs[1].prog = &obj->progs.raw_tracepoint__sys_enter;
	s->progs[1].link = &obj->links.raw_tracepoint__sys_enter;

	s->progs[2].name = "monitor_ingress";
	s->progs[2].prog = &obj->progs.monitor_ingress;
	s->progs[2].link = &obj->links.monitor_ingress;

	s->progs[3].name = "monitor_egress";
	s->progs[3].prog = &obj->progs.monitor_egress;
	s->progs[3].link = &obj->links.monitor_egress;

	s->data = container_monitoring_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *container_monitoring_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x88\x1f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0e\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x73\
\x79\x73\x63\x61\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\x72\x61\x77\x5f\x74\x72\x61\
\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x74\x72\
\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\x65\x74\x2f\x6e\x65\x74\x5f\x64\x65\
\x76\x5f\x71\x75\x65\x75\x65\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\
\x65\x74\x2f\x6e\x65\x74\x69\x66\x5f\x72\x65\x63\x65\x69\x76\x65\x5f\x73\x6b\
\x62\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\
\x2e\x72\x6f\x64\x61\x74\x61\0\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x5f\x6d\x6f\
\x6e\x69\x74\x6f\x72\x69\x6e\x67\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\
\x31\x31\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\
\x5f\x5f\x66\x6d\x74\0\x4c\x42\x42\x30\x5f\x33\0\x5f\x5f\x5f\x5f\x70\x72\x6f\
\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x4c\x42\x42\
\x30\x5f\x35\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\x4c\x42\x42\x30\x5f\x37\0\x5f\x5f\x5f\
\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\
\x74\x2e\x32\0\x4c\x42\x42\x30\x5f\x39\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\
\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x33\0\x4c\x42\x42\
\x30\x5f\x32\x31\0\x4c\x42\x42\x30\x5f\x32\x30\0\x4c\x42\x42\x30\x5f\x31\x33\0\
\x4c\x42\x42\x30\x5f\x31\x35\0\x4c\x42\x42\x30\x5f\x31\x37\0\x4c\x42\x42\x30\
\x5f\x31\x39\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x34\0\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\
\x65\0\x4c\x49\x4e\x55\x58\x5f\x48\x41\x53\x5f\x53\x59\x53\x43\x41\x4c\x4c\x5f\
\x57\x52\x41\x50\x50\x45\x52\0\x64\x61\x74\x61\x5f\x6d\x61\x70\0\x72\x61\x77\
\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x73\x79\x73\x5f\x65\x6e\
\x74\x65\x72\0\x6d\x6f\x6e\x69\x74\x6f\x72\x5f\x69\x6e\x67\x72\x65\x73\x73\0\
\x6d\x6f\x6e\x69\x74\x6f\x72\x5f\x65\x67\x72\x65\x73\x73\0\x4c\x49\x43\x45\x4e\
\x53\x45\0\x74\x61\x72\x67\x65\x74\x5f\x70\x69\x64\0\x64\x65\x76\0\x69\x6e\x6f\
\0\x2e\x72\x65\x6c\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\
\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xad\0\0\0\0\0\x03\
\0\xf8\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb5\0\0\0\x01\0\x0a\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\xcc\0\0\0\0\0\x03\0\x38\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\
\0\0\0\x01\0\x0a\0\x40\0\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\xeb\0\0\0\0\0\x03\0\x70\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf2\0\0\0\x01\0\x0a\0\x5c\0\0\0\0\0\0\0\x20\0\
\0\0\0\0\0\0\x0c\x01\0\0\0\0\x03\0\xa8\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\x01\
\0\0\x01\0\x0a\0\x7c\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\x2d\x01\0\0\0\0\x03\0\xe0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\x01\0\0\x01\0\x0a\0\x9a\0\0\0\0\0\0\0\x1c\
\0\0\0\0\0\0\0\x4e\x01\0\0\0\0\x03\0\xc8\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\
\x01\0\0\0\0\x03\0\xa8\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5e\x01\0\0\0\0\x03\0\
\xf0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x66\x01\0\0\0\0\x03\0\x28\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x6e\x01\0\0\0\0\x03\0\x60\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x76\
\x01\0\0\0\0\x03\0\x98\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\x01\0\0\x01\0\x0a\0\
\xb6\0\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x98\x01\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x18\x05\0\0\0\0\0\0\xa4\
\x01\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\x11\0\x09\0\0\0\
\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xc7\x01\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x18\0\0\
\0\0\0\0\0\xe1\x01\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\xf1\x01\0\
\0\x12\0\x06\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\x02\0\0\x11\0\x07\0\0\0\0\0\
\0\0\0\0\x0d\0\0\0\0\0\0\0\x08\x02\0\0\x11\0\x08\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\x13\x02\0\0\x11\0\x08\0\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x17\x02\0\0\
\x11\0\x08\0\x10\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x71\x22\0\0\0\0\0\0\x15\x02\x5b\0\0\0\0\0\xb7\x02\0\0\x70\0\0\0\x79\x16\
\x70\0\0\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x23\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\
\x01\0\0\xc0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\x71\0\0\0\xb7\x01\0\0\
\x68\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\0\0\0\0\0\x79\xa7\xc0\xff\0\0\0\0\xbf\
\xa1\0\0\0\0\0\0\x07\x01\0\0\xc0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\
\x71\0\0\0\xb7\x01\0\0\x60\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\0\0\0\0\0\xbf\
\xa1\0\0\0\0\0\0\x07\x01\0\0\xc0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\
\x71\0\0\0\xb7\x01\0\0\x38\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\0\0\0\0\0\xbf\
\xa1\0\0\0\0\0\0\x07\x01\0\0\xc0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\
\x71\0\0\0\xb7\x01\0\0\x48\0\0\0\x0f\x16\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\
\x01\0\0\xc0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\xbf\x63\0\0\0\0\0\0\x85\0\0\0\
\x71\0\0\0\xbf\xa6\0\0\0\0\0\0\x07\x06\0\0\xf0\xff\xff\xff\xbf\x61\0\0\0\0\0\0\
\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x01\0\0\0\0\
\0\0\x77\x01\0\0\x20\0\0\0\x63\x1a\xec\xff\0\0\0\0\xb7\x02\0\0\0\0\0\0\x7b\x2a\
\xc8\xff\0\0\0\0\x7b\x2a\xc0\xff\0\0\0\0\x7b\x6a\xe0\xff\0\0\0\0\x57\0\0\0\xff\
\xff\0\0\x7b\x0a\xd8\xff\0\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\xbf\xa3\0\0\0\0\0\0\
\x07\x03\0\0\xc0\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x40\0\0\0\xb7\x04\0\0\x28\0\0\0\x85\0\0\0\xb1\0\0\0\xbf\x71\0\0\0\0\0\0\x57\
\x01\0\0\0\0\0\x20\x15\x01\x04\0\0\0\0\0\x18\x01\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x1c\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\0\0\
\0\x40\x15\x01\x04\0\0\0\0\0\x18\x01\0\0\x5c\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x20\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\0\0\x02\0\x15\
\x01\x04\0\0\0\0\0\x18\x01\0\0\x7c\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1e\0\0\0\
\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\0\0\0\x04\x15\x01\x04\0\0\
\0\0\0\x18\x01\0\0\x9a\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1c\0\0\0\x85\0\0\0\
\x06\0\0\0\x57\x07\0\0\0\0\0\x08\x15\x07\x3b\0\0\0\0\0\x05\0\x36\0\0\0\0\0\x79\
\x17\x70\0\0\0\0\0\xbf\xa6\0\0\0\0\0\0\x07\x06\0\0\xf0\xff\xff\xff\xbf\x61\0\0\
\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x01\
\0\0\0\0\0\0\x77\x01\0\0\x20\0\0\0\x63\x1a\xec\xff\0\0\0\0\xb7\x02\0\0\0\0\0\0\
\x7b\x2a\xc8\xff\0\0\0\0\x7b\x2a\xc0\xff\0\0\0\0\x7b\x6a\xe0\xff\0\0\0\0\x57\0\
\0\0\xff\xff\0\0\x7b\x0a\xd8\xff\0\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\xbf\xa3\0\0\0\
\0\0\0\x07\x03\0\0\xc0\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\
\0\0\x40\0\0\0\xb7\x04\0\0\x28\0\0\0\x85\0\0\0\xb1\0\0\0\xbf\x71\0\0\0\0\0\0\
\x57\x01\0\0\0\0\0\x20\x15\x01\x04\0\0\0\0\0\x18\x01\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\xb7\x02\0\0\x1c\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\
\0\0\0\x40\x15\x01\x04\0\0\0\0\0\x18\x01\0\0\x5c\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\
\0\0\x20\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\0\0\x02\0\
\x15\x01\x04\0\0\0\0\0\x18\x01\0\0\x7c\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1e\0\
\0\0\x85\0\0\0\x06\0\0\0\xbf\x71\0\0\0\0\0\0\x57\x01\0\0\0\0\0\x04\x15\x01\x04\
\0\0\0\0\0\x18\x01\0\0\x9a\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1c\0\0\0\x85\0\0\
\0\x06\0\0\0\x57\x07\0\0\0\0\0\x08\x15\x07\x04\0\0\0\0\0\x18\x01\0\0\xb6\0\0\0\
\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1c\0\0\0\x85\0\0\0\x06\0\0\0\xbf\xa2\0\0\0\0\0\0\
\x07\x02\0\0\xec\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xc0\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\
\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\xb7\0\0\0\0\0\0\0\x95\
\0\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x85\0\0\
\0\x0e\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\
\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x50\x49\x44\x2e\x6e\x73\x3a\x20\x25\x64\x2c\x20\x54\x47\x49\x44\
\x2e\x6e\x73\x3a\x20\x25\x64\x20\x7c\x20\x50\x49\x44\x3a\x20\x25\x64\x2c\x20\
\x54\x47\x49\x44\x3a\x20\x25\x64\x20\x7c\x20\x43\x6f\x6d\x6d\x61\x6e\x64\x20\
\x6e\x61\x6d\x65\x3a\x20\x25\x73\x0a\0\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\
\x65\x77\x20\x50\x49\x44\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\0\x43\x72\
\x65\x61\x74\x69\x6e\x67\x20\x6e\x65\x77\x20\x6e\x65\x74\x77\x6f\x72\x6b\x20\
\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\0\x43\x72\x65\x61\x74\x69\x6e\x67\x20\
\x6e\x65\x77\x20\x6d\x6f\x75\x6e\x74\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\
\x0a\0\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\x65\x77\x20\x55\x54\x53\x20\x6e\
\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\0\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\
\x65\x77\x20\x49\x50\x43\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x19\0\0\0\xd8\x01\0\0\0\0\0\0\x01\0\0\0\x17\0\0\
\0\x18\x02\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\x50\x02\0\0\0\0\0\0\x01\0\0\0\x17\0\
\0\0\x88\x02\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\xc0\x02\0\0\0\0\0\0\x01\0\0\0\x17\
\0\0\0\x90\x03\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\xd0\x03\0\0\0\0\0\0\x01\0\0\0\
\x17\0\0\0\x08\x04\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\x40\x04\0\0\0\0\0\0\x01\0\0\
\0\x17\0\0\0\x78\x04\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\xa8\x04\0\0\0\0\0\0\x01\0\
\0\0\x17\0\0\0\xe8\x04\0\0\0\0\0\0\x01\0\0\0\x1a\0\0\0\x9f\xeb\x01\0\x18\0\0\0\
\0\0\0\0\x24\x06\0\0\x24\x06\0\0\x05\x07\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\
\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\
\0\0\x02\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\
\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\x02\
\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1d\0\0\0\0\0\0\x08\x0a\0\0\0\x23\0\0\
\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x30\0\0\0\x05\0\0\
\x04\x20\0\0\0\x3a\0\0\0\x0d\0\0\0\0\0\0\0\x3e\0\0\0\x0d\0\0\0\x20\0\0\0\x43\0\
\0\0\x08\0\0\0\x40\0\0\0\x46\0\0\0\x08\0\0\0\x60\0\0\0\x4c\0\0\0\x10\0\0\0\x80\
\0\0\0\x51\0\0\0\0\0\0\x08\x0e\0\0\0\x57\0\0\0\0\0\0\x08\x02\0\0\0\x66\0\0\0\0\
\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\0\
\x10\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x6b\0\0\0\x01\0\0\0\0\0\0\0\x70\0\0\0\
\x05\0\0\0\x40\0\0\0\x7c\0\0\0\x07\0\0\0\x80\0\0\0\x80\0\0\0\x0b\0\0\0\xc0\0\0\
\0\x86\0\0\0\0\0\0\x0e\x11\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x14\0\0\0\x8f\0\0\
\0\x15\0\0\x04\xa8\0\0\0\x97\0\0\0\x15\0\0\0\0\0\0\0\x9b\0\0\0\x15\0\0\0\x40\0\
\0\0\x9f\0\0\0\x15\0\0\0\x80\0\0\0\xa3\0\0\0\x15\0\0\0\xc0\0\0\0\xa7\0\0\0\x15\
\0\0\0\0\x01\0\0\xaa\0\0\0\x15\0\0\0\x40\x01\0\0\xad\0\0\0\x15\0\0\0\x80\x01\0\
\0\xb1\0\0\0\x15\0\0\0\xc0\x01\0\0\xb5\0\0\0\x15\0\0\0\0\x02\0\0\xb8\0\0\0\x15\
\0\0\0\x40\x02\0\0\xbb\0\0\0\x15\0\0\0\x80\x02\0\0\xbe\0\0\0\x15\0\0\0\xc0\x02\
\0\0\xc1\0\0\0\x15\0\0\0\0\x03\0\0\xc4\0\0\0\x15\0\0\0\x40\x03\0\0\xc7\0\0\0\
\x15\0\0\0\x80\x03\0\0\xca\0\0\0\x15\0\0\0\xc0\x03\0\0\xd2\0\0\0\x15\0\0\0\0\
\x04\0\0\xd5\0\0\0\x15\0\0\0\x40\x04\0\0\x46\0\0\0\x15\0\0\0\x80\x04\0\0\xd8\0\
\0\0\x15\0\0\0\xc0\x04\0\0\xdb\0\0\0\x15\0\0\0\0\x05\0\0\xde\0\0\0\0\0\0\x01\
\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xec\0\0\0\x13\0\0\0\xf0\0\0\
\0\x01\0\0\x0c\x16\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\0\xfc\0\0\0\x01\0\0\x04\0\0\
\0\0\x14\x01\0\0\x1c\0\0\0\0\0\0\0\x19\x01\0\0\0\0\0\x08\x1b\0\0\0\x1f\x01\0\0\
\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1a\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xec\0\0\0\x18\0\0\0\x32\x01\0\0\x01\0\0\
\x0c\x1d\0\0\0\0\0\0\0\0\0\0\x02\x20\0\0\0\x4c\x01\0\0\x07\0\0\x04\x18\0\0\0\
\x61\x01\0\0\x21\0\0\0\0\0\0\0\x6e\x01\0\0\x22\0\0\0\x10\0\0\0\x7c\x01\0\0\x22\
\0\0\0\x18\0\0\0\x91\x01\0\0\x02\0\0\0\x20\0\0\0\x9d\x01\0\0\x23\0\0\0\x40\0\0\
\0\xa5\x01\0\0\x0a\0\0\0\x80\0\0\0\xa9\x01\0\0\x24\0\0\0\xa0\0\0\0\xae\x01\0\0\
\0\0\0\x01\x02\0\0\0\x10\0\0\0\xbd\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\0\0\0\
\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\0\x04\0\0\0\0\
\0\0\0\x01\0\0\x0d\x02\0\0\0\xec\0\0\0\x1f\0\0\0\xcb\x01\0\0\x01\0\0\x0c\x25\0\
\0\0\xdb\x01\0\0\x01\0\0\x0c\x25\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\
\0\0\0\x0d\0\0\0\xea\x01\0\0\0\0\0\x0e\x28\0\0\0\x01\0\0\0\xf2\x01\0\0\0\0\0\
\x0e\x02\0\0\0\x01\0\0\0\xfd\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x04\x03\x02\0\
\0\0\0\0\x0e\x2b\0\0\0\x02\0\0\0\x1d\x02\0\0\0\0\0\x0e\x1b\0\0\0\x01\0\0\0\x21\
\x02\0\0\0\0\0\x0e\x1b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0f\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x2f\0\0\0\x04\0\0\0\x40\0\0\0\x25\x02\0\0\0\0\0\x0e\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x2f\0\0\0\x04\0\0\0\x1c\0\0\0\x3c\x02\0\0\0\0\
\0\x0e\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x2f\0\0\0\x04\0\0\0\x20\0\0\
\0\x54\x02\0\0\0\0\0\x0e\x34\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x2f\0\0\0\
\x04\0\0\0\x1e\0\0\0\x6e\x02\0\0\0\0\0\x0e\x36\0\0\0\0\0\0\0\x88\x02\0\0\0\0\0\
\x0e\x32\0\0\0\0\0\0\0\xa2\x02\0\0\0\0\0\x0e\x32\0\0\0\0\0\0\0\x7b\x06\0\0\x01\
\0\0\x0f\x0d\0\0\0\x29\0\0\0\0\0\0\0\x0d\0\0\0\x83\x06\0\0\x03\0\0\x0f\x18\0\0\
\0\x2a\0\0\0\0\0\0\0\x04\0\0\0\x2d\0\0\0\x08\0\0\0\x08\0\0\0\x2e\0\0\0\x10\0\0\
\0\x08\0\0\0\x88\x06\0\0\x01\0\0\x0f\x20\0\0\0\x12\0\0\0\0\0\0\0\x20\0\0\0\x8e\
\x06\0\0\x06\0\0\x0f\xd2\0\0\0\x31\0\0\0\0\0\0\0\x40\0\0\0\x33\0\0\0\x40\0\0\0\
\x1c\0\0\0\x35\0\0\0\x5c\0\0\0\x20\0\0\0\x37\0\0\0\x7c\0\0\0\x1e\0\0\0\x38\0\0\
\0\x9a\0\0\0\x1c\0\0\0\x39\0\0\0\xb6\0\0\0\x1c\0\0\0\x96\x06\0\0\x01\0\0\x0f\0\
\0\0\0\x2c\0\0\0\0\0\0\0\x01\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x33\x32\0\x5f\x5f\x75\
\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x74\x61\x73\x6b\
\x5f\x64\x61\x74\x61\0\x70\x69\x64\0\x74\x67\x69\x64\0\x6e\x73\0\x66\x6c\x61\
\x67\x73\0\x63\x6f\x6d\x6d\0\x70\x69\x64\x5f\x74\0\x5f\x5f\x6b\x65\x72\x6e\x65\
\x6c\x5f\x70\x69\x64\x5f\x74\0\x63\x68\x61\x72\0\x74\x79\x70\x65\0\x6d\x61\x78\
\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x64\x61\
\x74\x61\x5f\x6d\x61\x70\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\
\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\
\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\
\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x73\x70\0\x73\x73\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x70\x72\x6f\x62\
\x65\x5f\x63\x6c\x6f\x6e\x65\0\x62\x70\x66\x5f\x72\x61\x77\x5f\x74\x72\x61\x63\
\x65\x70\x6f\x69\x6e\x74\x5f\x61\x72\x67\x73\0\x61\x72\x67\x73\0\x5f\x5f\x75\
\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\
\x67\0\x72\x61\x77\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x73\x79\
\x73\x5f\x65\x6e\x74\x65\x72\0\x6e\x65\x74\x5f\x64\x65\x76\x5f\x71\x75\x65\x75\
\x65\x5f\x70\x61\x72\x61\x6d\x73\0\x63\x6f\x6d\x6d\x61\x6e\x64\x5f\x74\x79\x70\
\x65\0\x63\x6f\x6d\x6d\x61\x6e\x64\x5f\x66\x6c\x61\x67\x73\0\x63\x6f\x6d\x6d\
\x6f\x6e\x5f\x70\x72\x65\x65\x6d\x70\x74\x5f\x63\x6f\x75\x6e\x74\0\x63\x6f\x6d\
\x6d\x61\x6e\x64\x5f\x70\x69\x64\0\x73\x6b\x62\x61\x64\x64\x72\0\x6c\x65\x6e\0\
\x6e\x61\x6d\x65\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x6d\x6f\x6e\x69\x74\x6f\
\x72\x5f\x69\x6e\x67\x72\x65\x73\x73\0\x6d\x6f\x6e\x69\x74\x6f\x72\x5f\x65\x67\
\x72\x65\x73\x73\0\x4c\x49\x43\x45\x4e\x53\x45\0\x74\x61\x72\x67\x65\x74\x5f\
\x70\x69\x64\0\x5f\x42\x6f\x6f\x6c\0\x4c\x49\x4e\x55\x58\x5f\x48\x41\x53\x5f\
\x53\x59\x53\x43\x41\x4c\x4c\x5f\x57\x52\x41\x50\x50\x45\x52\0\x64\x65\x76\0\
\x69\x6e\x6f\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\
\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\
\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\
\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\x5f\x5f\x5f\
\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\
\x74\x2e\x32\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x33\0\x5f\x5f\x5f\x5f\x70\x72\x6f\x62\x65\x5f\
\x63\x6c\x6f\x6e\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x34\0\x2f\x68\x6f\x6d\
\x65\x2f\x70\x61\x72\x74\x68\x2f\x57\x6f\x72\x6b\x2f\x41\x6c\x6c\x5f\x64\x61\
\x74\x61\x2f\x75\x6e\x69\x76\x65\x72\x73\x69\x74\x79\x2f\x41\x64\x76\x61\x6e\
\x63\x65\x5f\x4f\x53\x2f\x41\x73\x73\x69\x67\x6e\x6d\x65\x6e\x74\x2f\x41\x73\
\x73\x69\x67\x6e\x6d\x65\x6e\x74\x5f\x33\x2f\x71\x34\x2f\x63\x6f\x6e\x74\x61\
\x69\x6e\x65\x72\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x69\x6e\x67\x2e\x62\x70\x66\
\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x53\x59\x53\x43\x41\x4c\x4c\x28\
\x70\x72\x6f\x62\x65\x5f\x63\x6c\x6f\x6e\x65\x2c\x20\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x6c\x6f\x6e\x67\x20\x66\x6c\x61\x67\x73\x2c\x20\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x73\x74\x61\x63\x6b\x2c\x20\x69\x6e\
\x74\x20\x2a\x70\x61\x72\x65\x6e\x74\x5f\x74\x69\x64\x2c\x20\x69\x6e\x74\x20\
\x2a\x63\x68\x69\x6c\x64\x5f\x74\x69\x64\x2c\x20\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x6c\x6f\x6e\x67\x20\x74\x6c\x73\x29\0\x09\x62\x70\x66\x5f\x67\x65\x74\
\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x26\x63\x6f\x6d\x6d\
\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x63\x6f\x6d\x6d\x29\x29\x3b\0\x09\x75\x36\
\x34\x20\x70\x69\x64\x5f\x74\x67\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\
\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\
\x29\x3b\0\x09\x75\x33\x32\x20\x70\x69\x64\x20\x3d\x20\x70\x69\x64\x5f\x74\x67\
\x69\x64\x20\x3e\x3e\x20\x33\x32\x3b\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\
\x6b\x28\x22\x50\x49\x44\x2e\x6e\x73\x3a\x20\x25\x64\x2c\x20\x54\x47\x49\x44\
\x2e\x6e\x73\x3a\x20\x25\x64\x20\x7c\x20\x50\x49\x44\x3a\x20\x25\x64\x2c\x20\
\x54\x47\x49\x44\x3a\x20\x25\x64\x20\x7c\x20\x43\x6f\x6d\x6d\x61\x6e\x64\x20\
\x6e\x61\x6d\x65\x3a\x20\x25\x73\x5c\x6e\x22\x2c\x20\x64\x61\x74\x61\x2e\x70\
\x69\x64\x2c\x20\x64\x61\x74\x61\x2e\x74\x67\x69\x64\x2c\x20\x70\x69\x64\x2c\
\x20\x74\x67\x69\x64\x2c\x20\x63\x6f\x6d\x6d\x29\x3b\0\x09\x75\x33\x32\x20\x74\
\x67\x69\x64\x20\x3d\x20\x28\x75\x33\x32\x29\x28\x70\x69\x64\x5f\x74\x67\x69\
\x64\x20\x26\x20\x30\x78\x46\x46\x46\x46\x29\x3b\0\x09\x69\x66\x20\x28\x66\x6c\
\x61\x67\x73\x20\x26\x20\x43\x4c\x4f\x4e\x45\x5f\x4e\x45\x57\x50\x49\x44\x29\0\
\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x43\x72\x65\x61\x74\
\x69\x6e\x67\x20\x6e\x65\x77\x20\x50\x49\x44\x20\x6e\x61\x6d\x65\x73\x70\x61\
\x63\x65\x5c\x6e\x22\x29\x3b\0\x09\x69\x66\x20\x28\x66\x6c\x61\x67\x73\x20\x26\
\x20\x43\x4c\x4f\x4e\x45\x5f\x4e\x45\x57\x4e\x45\x54\x29\0\x09\x09\x62\x70\x66\
\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\
\x65\x77\x20\x6e\x65\x74\x77\x6f\x72\x6b\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\
\x65\x5c\x6e\x22\x29\x3b\0\x09\x69\x66\x20\x28\x66\x6c\x61\x67\x73\x20\x26\x20\
\x43\x4c\x4f\x4e\x45\x5f\x4e\x45\x57\x4e\x53\x29\0\x09\x09\x62\x70\x66\x5f\x70\
\x72\x69\x6e\x74\x6b\x28\x22\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\x65\x77\
\x20\x6d\x6f\x75\x6e\x74\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x5c\x6e\x22\
\x29\x3b\0\x09\x69\x66\x20\x28\x66\x6c\x61\x67\x73\x20\x26\x20\x43\x4c\x4f\x4e\
\x45\x5f\x4e\x45\x57\x55\x54\x53\x29\0\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\
\x74\x6b\x28\x22\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\x65\x77\x20\x55\x54\
\x53\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x5c\x6e\x22\x29\x3b\0\x09\x69\x66\
\x20\x28\x66\x6c\x61\x67\x73\x20\x26\x20\x43\x4c\x4f\x4e\x45\x5f\x4e\x45\x57\
\x49\x50\x43\x29\0\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x43\
\x72\x65\x61\x74\x69\x6e\x67\x20\x6e\x65\x77\x20\x49\x50\x43\x20\x6e\x61\x6d\
\x65\x73\x70\x61\x63\x65\x5c\x6e\x22\x29\x3b\0\x09\x62\x70\x66\x5f\x6d\x61\x70\
\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x64\x61\x74\x61\x5f\
\x6d\x61\x70\x2c\x20\x26\x70\x69\x64\x2c\x20\x26\x64\x61\x74\x61\x2c\x20\x42\
\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\
\x7d\0\x30\x3a\x31\x34\0\x30\x3a\x31\x33\0\x30\x3a\x31\x32\0\x30\x3a\x37\0\x30\
\x3a\x39\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\
\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x6b\x63\x6f\x6e\x66\x69\x67\0\x6b\x73\x79\
\x73\x63\x61\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\x72\x61\x77\x5f\x74\x72\x61\x63\
\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x74\x72\x61\
\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\x65\x74\x2f\x6e\x65\x74\x5f\x64\x65\x76\
\x5f\x71\x75\x65\x75\x65\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\x65\
\x74\x2f\x6e\x65\x74\x69\x66\x5f\x72\x65\x63\x65\x69\x76\x65\x5f\x73\x6b\x62\0\
\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x44\0\0\0\x44\0\0\0\x74\x04\0\0\
\xb8\x04\0\0\x7c\0\0\0\x08\0\0\0\x9f\x06\0\0\x01\0\0\0\0\0\0\0\x17\0\0\0\xae\
\x06\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\xc7\x06\0\0\x01\0\0\0\0\0\0\0\x26\0\0\0\
\xe4\x06\0\0\x01\0\0\0\0\0\0\0\x27\0\0\0\x10\0\0\0\x9f\x06\0\0\x3f\0\0\0\0\0\0\
\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x50\0\0\0\xbc\x02\0\0\x22\x03\0\0\x05\
\x30\x01\0\x78\0\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x88\0\0\0\xbc\x02\0\
\0\x22\x03\0\0\x05\x30\x01\0\x90\0\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\
\xc0\0\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\xc8\0\0\0\xbc\x02\0\0\x22\x03\
\0\0\x05\x30\x01\0\xf8\0\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\0\x01\0\0\
\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x28\x01\0\0\xbc\x02\0\0\x22\x03\0\0\x05\
\x30\x01\0\x30\x01\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x50\x01\0\0\xbc\
\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x58\x01\0\0\xbc\x02\0\0\x9e\x03\0\0\x02\x4c\
\x01\0\x70\x01\0\0\xbc\x02\0\0\xca\x03\0\0\x11\x58\x01\0\x78\x01\0\0\xbc\x02\0\
\0\xf6\x03\0\0\x15\x5c\x01\0\x88\x01\0\0\xbc\x02\0\0\xf6\x03\0\0\x06\x5c\x01\0\
\x98\x01\0\0\xbc\x02\0\0\x11\x04\0\0\x02\xc0\x01\0\xb0\x01\0\0\xbc\x02\0\0\x88\
\x04\0\0\x0d\x60\x01\0\xb8\x01\0\0\xbc\x02\0\0\x11\x04\0\0\x02\xc0\x01\0\xd0\
\x01\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\xd8\x01\0\0\xbc\x02\0\0\x11\x04\
\0\0\x02\xc0\x01\0\0\x02\0\0\xbc\x02\0\0\xae\x04\0\0\x0c\xd0\x01\0\x10\x02\0\0\
\xbc\x02\0\0\xae\x04\0\0\x06\xd0\x01\0\x18\x02\0\0\xbc\x02\0\0\xc9\x04\0\0\x03\
\xd4\x01\0\x38\x02\0\0\xbc\x02\0\0\xf7\x04\0\0\x0c\xd8\x01\0\x48\x02\0\0\xbc\
\x02\0\0\xf7\x04\0\0\x06\xd8\x01\0\x50\x02\0\0\xbc\x02\0\0\x12\x05\0\0\x03\xdc\
\x01\0\x70\x02\0\0\xbc\x02\0\0\x44\x05\0\0\x0c\xe0\x01\0\x80\x02\0\0\xbc\x02\0\
\0\x44\x05\0\0\x06\xe0\x01\0\x88\x02\0\0\xbc\x02\0\0\x5e\x05\0\0\x03\xe4\x01\0\
\xa8\x02\0\0\xbc\x02\0\0\x8e\x05\0\0\x0c\xe8\x01\0\xb8\x02\0\0\xbc\x02\0\0\x8e\
\x05\0\0\x06\xe8\x01\0\xc0\x02\0\0\xbc\x02\0\0\xa9\x05\0\0\x03\xec\x01\0\xe0\
\x02\0\0\xbc\x02\0\0\xd7\x05\0\0\x0c\xf0\x01\0\xe8\x02\0\0\xbc\x02\0\0\xd7\x05\
\0\0\x06\xf0\x01\0\xf8\x02\0\0\xbc\x02\0\0\x22\x03\0\0\x05\x30\x01\0\x08\x03\0\
\0\xbc\x02\0\0\0\0\0\0\0\0\0\0\x10\x03\0\0\xbc\x02\0\0\x9e\x03\0\0\x02\x4c\x01\
\0\x28\x03\0\0\xbc\x02\0\0\xca\x03\0\0\x11\x58\x01\0\x30\x03\0\0\xbc\x02\0\0\
\xf6\x03\0\0\x15\x5c\x01\0\x40\x03\0\0\xbc\x02\0\0\xf6\x03\0\0\x06\x5c\x01\0\
\x50\x03\0\0\xbc\x02\0\0\x11\x04\0\0\x02\xc0\x01\0\x68\x03\0\0\xbc\x02\0\0\x88\
\x04\0\0\x0d\x60\x01\0\x70\x03\0\0\xbc\x02\0\0\x11\x04\0\0\x02\xc0\x01\0\x88\
\x03\0\0\xbc\x02\0\0\0\0\0\0\0\0\0\0\x90\x03\0\0\xbc\x02\0\0\x11\x04\0\0\x02\
\xc0\x01\0\xb8\x03\0\0\xbc\x02\0\0\xae\x04\0\0\x0c\xd0\x01\0\xc8\x03\0\0\xbc\
\x02\0\0\xae\x04\0\0\x06\xd0\x01\0\xd0\x03\0\0\xbc\x02\0\0\xc9\x04\0\0\x03\xd4\
\x01\0\xf0\x03\0\0\xbc\x02\0\0\xf7\x04\0\0\x0c\xd8\x01\0\0\x04\0\0\xbc\x02\0\0\
\xf7\x04\0\0\x06\xd8\x01\0\x08\x04\0\0\xbc\x02\0\0\x12\x05\0\0\x03\xdc\x01\0\
\x28\x04\0\0\xbc\x02\0\0\x44\x05\0\0\x0c\xe0\x01\0\x38\x04\0\0\xbc\x02\0\0\x44\
\x05\0\0\x06\xe0\x01\0\x40\x04\0\0\xbc\x02\0\0\x5e\x05\0\0\x03\xe4\x01\0\x60\
\x04\0\0\xbc\x02\0\0\x8e\x05\0\0\x0c\xe8\x01\0\x70\x04\0\0\xbc\x02\0\0\x8e\x05\
\0\0\x06\xe8\x01\0\x78\x04\0\0\xbc\x02\0\0\xa9\x05\0\0\x03\xec\x01\0\x98\x04\0\
\0\xbc\x02\0\0\xd7\x05\0\0\x0c\xf0\x01\0\xa0\x04\0\0\xbc\x02\0\0\xd7\x05\0\0\
\x06\xf0\x01\0\xa8\x04\0\0\xbc\x02\0\0\xf2\x05\0\0\x03\xf4\x01\0\xd0\x04\0\0\
\xbc\x02\0\0\x20\x06\0\0\x02\xfc\x01\0\x08\x05\0\0\xbc\x02\0\0\x22\x03\0\0\x05\
\x30\x01\0\xae\x06\0\0\x02\0\0\0\0\0\0\0\xbc\x02\0\0\xca\x03\0\0\x11\0\x03\0\
\x08\0\0\0\xbc\x02\0\0\x57\x06\0\0\x02\x58\x03\0\xc7\x06\0\0\x02\0\0\0\0\0\0\0\
\xbc\x02\0\0\xca\x03\0\0\x11\xa8\x03\0\x08\0\0\0\xbc\x02\0\0\x62\x06\0\0\x01\
\x0c\x04\0\xe4\x06\0\0\x02\0\0\0\0\0\0\0\xbc\x02\0\0\xca\x03\0\0\x11\x24\x04\0\
\x08\0\0\0\xbc\x02\0\0\x62\x06\0\0\x01\x84\x04\0\x10\0\0\0\x9f\x06\0\0\x07\0\0\
\0\x20\0\0\0\x14\0\0\0\x64\x06\0\0\0\0\0\0\x28\0\0\0\x14\0\0\0\x64\x06\0\0\0\0\
\0\0\x60\0\0\0\x14\0\0\0\x69\x06\0\0\0\0\0\0\xa0\0\0\0\x14\0\0\0\x6e\x06\0\0\0\
\0\0\0\xd8\0\0\0\x14\0\0\0\x73\x06\0\0\0\0\0\0\x10\x01\0\0\x14\0\0\0\x77\x06\0\
\0\0\0\0\0\xf8\x02\0\0\x14\0\0\0\x64\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x40\0\0\0\0\0\0\0\x3c\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x02\
\0\0\0\0\0\0\x30\x03\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x05\0\0\0\0\
\0\0\x18\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0a\0\0\0\0\0\0\x18\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x39\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\x01\0\0\0\x06\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf8\x0a\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x77\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x10\x0b\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x7f\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\x0b\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x84\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x0b\0\0\0\0\0\
\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8a\0\0\
\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x0b\0\0\0\0\0\0\xd2\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\x02\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x0c\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x2e\x02\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0c\0\0\0\0\0\0\x41\x0d\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\x02\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x30\x1a\0\0\0\0\0\0\x54\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct container_monitoring_bpf *container_monitoring_bpf::open(const struct bpf_object_open_opts *opts) { return container_monitoring_bpf__open_opts(opts); }
struct container_monitoring_bpf *container_monitoring_bpf::open_and_load() { return container_monitoring_bpf__open_and_load(); }
int container_monitoring_bpf::load(struct container_monitoring_bpf *skel) { return container_monitoring_bpf__load(skel); }
int container_monitoring_bpf::attach(struct container_monitoring_bpf *skel) { return container_monitoring_bpf__attach(skel); }
void container_monitoring_bpf::detach(struct container_monitoring_bpf *skel) { container_monitoring_bpf__detach(skel); }
void container_monitoring_bpf::destroy(struct container_monitoring_bpf *skel) { container_monitoring_bpf__destroy(skel); }
const void *container_monitoring_bpf::elf_bytes(size_t *sz) { return container_monitoring_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
container_monitoring_bpf__assert(struct container_monitoring_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->target_pid) == 4, "unexpected size of 'target_pid'");
	_Static_assert(sizeof(s->bss->dev) == 8, "unexpected size of 'dev'");
	_Static_assert(sizeof(s->bss->ino) == 8, "unexpected size of 'ino'");
	_Static_assert(sizeof(s->kconfig->LINUX_HAS_SYSCALL_WRAPPER) == 1, "unexpected size of 'LINUX_HAS_SYSCALL_WRAPPER'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CONTAINER_MONITORING_BPF_SKEL_H__ */
